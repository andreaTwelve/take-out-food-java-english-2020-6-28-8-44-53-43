import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("============= Order details =============\n");
        List<String> iList = inputs.stream()
                .map(item -> item.substring(0, item.indexOf("x") - 1))
                .collect(Collectors.toList());
        int length = inputs.get(0).length();
        List<Integer> countList = inputs.stream()
                .map(item -> Integer.valueOf(item.substring(length-1, length)))
                .collect(Collectors.toList());
        List<Item> items = itemRepository.findAll();
        List<SalesPromotion> salesPromotions = salesPromotionRepository.findAll();
        List<String> salesItemList = salesPromotions.get(1).getRelatedItems();
        List<String> salesItemName = new ArrayList<>();
        int total = 0;
        int firstPromotion = 0;
        int secondPromotion = 0;
        for (Item item: items) {
            for (int i = 0; i < inputs.size(); i++) {
                if (item.getId().equals(iList.get(i))) {
                    if (salesItemList.contains(iList.get(i))) {
                        secondPromotion += (item.getPrice() / 2) * countList.get(i);
                        salesItemName.add(item.getName());
                    } else {
                        secondPromotion += item.getPrice() * countList.get(i);
                    }
                    total += item.getPrice() * countList.get(i);
                    firstPromotion += item.getPrice() * countList.get(i);
                    stringBuilder.append(item.getName()).append(" x ").append(countList.get(i)).append(" = ").append((int) (item.getPrice() * countList.get(i))).append(" yuan\n");
                    break;
                }
            }
        }

        stringBuilder.append("-----------------------------------\n");
        if(firstPromotion >= 30){
            firstPromotion -= 6;
        }
        if(total <= firstPromotion && total <= secondPromotion){
            stringBuilder.append("Total: " + total + " yuan\n");
            stringBuilder.append("===================================");
        }else if(firstPromotion < total && firstPromotion <= secondPromotion){
            stringBuilder.append("Promotion used:\n");
            stringBuilder.append("Deduct 6 yuan when the order reaches 30 yuan, saving 6 yuan\n" + "-----------------------------------\n");
            stringBuilder.append("Total: " + firstPromotion + " yuan\n");
            stringBuilder.append("===================================");
        }else if(secondPromotion < total && secondPromotion < firstPromotion){
            stringBuilder.append("Promotion used:\n");
            stringBuilder.append("Half price for certain dishes (");
            String saleItem = salesItemName.stream().reduce("",(preElem, curElem)-> preElem + "," + curElem);
            stringBuilder.append(saleItem.substring(1));
            stringBuilder.append(")ï¼Œsaving " + (total - secondPromotion) + " yuan\n");
            stringBuilder.append("-----------------------------------\n");
            stringBuilder.append("Total: " + secondPromotion + " yuan\n");
            stringBuilder.append("===================================");
        }

        return stringBuilder.toString();
    }
}
